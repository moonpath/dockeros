ARG BASE_IMAGE="nvidia/cuda:11.7.0-cudnn8-devel-ubuntu22.04"
FROM $BASE_IMAGE as base_image

ARG CONFIG_DIR_SRC="/dockerconfig"
ARG DEBIAN_FRONTEND=noninteractive
ARG USER=admin

# set timezone
ENV LANGUAGE=C.UTF-8
ENV LC_ALL=C.UTF-8
ENV LANG=C.UTF-8

RUN apt update && \
	apt install -y \
	apt-utils \
	gnupg2

RUN adduser $USER --disabled-password --gecos ''
RUN apt install -y sudo && \
	echo "$USER ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

# install build tools
RUN apt install -y \
	curl \
	wget \
	git

# install desktop services
RUN apt install -y \
	dbus-x11 \
	libdbus-glib-1-2 \
	libpulse-dev \
	vlc \
	xfce4 \
	xfce4-terminal
COPY $CONFIG_DIR_SRC/xfce4-screensaver.xml /etc/xdg/xfce4/xfconf/xfce-perchannel-xml/xfce4-screensaver.xml
COPY $CONFIG_DIR_SRC/xfce4-power-manager.xml /etc/xdg/xfce4/xfconf/xfce-perchannel-xml/xfce4-power-manager.xml

# install language support
RUN apt install -y \
	language-pack-zh* \
	fonts-droid-fallback \
	ttf-wqy-zenhei \
	ttf-wqy-microhei \
	fonts-arphic-ukai \
	fonts-arphic-uming

# install web services
RUN apt install -y \
	nginx \
	nodejs \
	npm

# install kasmvncserver
RUN wget https://github.com/kasmtech/KasmVNC/releases/download/v1.2.0/kasmvncserver_jammy_1.2.0_amd64.deb && \
	apt install -y ./kasmvncserver_*.deb && \
	addgroup $USER ssl-cert && \
	rm -rf kasmvncserver_*.deb

# filebrower and sound
COPY $CONFIG_DIR_SRC/webos.conf /etc/nginx/sites-available/webos
COPY /kclient /usr/local/lib/kclient
RUN cd /usr/local/lib/kclient && \
	npm install && \
	rm -f package-lock.json

RUN apt install -y \
	openssh-server \
	libpam-google-authenticator && \
	sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config

RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - && \
	echo "deb [arch=amd64] https://download.docker.com/linux/ubuntu jammy stable" > /etc/apt/sources.list.d/docker.list && \
	curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | \
	gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg && \
	curl -sL https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \
    sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \
    tee /etc/apt/sources.list.d/nvidia-container-toolkit.list && \
	apt update && \
	apt install -y \
	docker-ce \
	docker-ce-cli \
	docker-compose-plugin \
	nvidia-container-runtime
COPY $CONFIG_DIR_SRC/daemon.json /etc/docker/daemon.json
RUN sed -i "s/\$HOME/$(echo /home/$USER | sed 's/\//\\&/g')/" /etc/docker/daemon.json

# install frp
RUN wget https://github.com/fatedier/frp/releases/download/v0.48.0/frp_0.48.0_linux_amd64.tar.gz && \
	tar -zxvf frp_0.48.0_linux_amd64.tar.gz && \
	mv frp_0.48.0_linux_amd64 /usr/local/lib/frp && \
	rm frp_0.48.0_linux_amd64.tar.gz && \
	ln -s /usr/local/lib/frp/frpc /usr/local/bin/frpc && \
	ln -s /usr/local/lib/frp/frps /usr/local/bin/frps

# install vscode and edge
RUN curl https://packages.microsoft.com/keys/microsoft.asc | \
	gpg --dearmor > microsoft.gpg && \
	install -o root -g root -m 644 microsoft.gpg /etc/apt/trusted.gpg.d/ && \
	sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main" > /etc/apt/sources.list.d/microsoft-vscode.list' && \
	sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/edge stable main" > /etc/apt/sources.list.d/microsoft-edge.list' && \
	rm microsoft.gpg && \
	apt update && \
	apt install -y code && \
	apt install -y microsoft-edge-stable

COPY $CONFIG_DIR_SRC/jetbrains-toolbox.sh jetbrains-toolbox.sh
RUN apt install -y \
	libfuse2 \
	libxi6 \
	libxrender1 \
	libxtst6 \
	mesa-utils \
	libfontconfig \
	libgtk-3-bin && \
	bash jetbrains-toolbox.sh && \
	rm -f jetbrains-toolbox.sh
COPY $CONFIG_DIR_SRC/jetbrains-toolbox.svg /usr/local/share/JetBrains/Toolbox/jetbrains-toolbox.svg
COPY $CONFIG_DIR_SRC/jetbrains-toolbox.desktop /usr/local/share/JetBrains/Toolbox/jetbrains-toolbox.desktop

RUN apt install -y \
	iproute2 \
	iputils-ping \
	netcat \
	socat \
	nmap \ 
	vim

RUN apt -y autoclean && \
	apt -y autoremove && \
	rm -rf /var/lib/apt/lists/* \
	/var/tmp/* \
	/tmp/*

COPY $CONFIG_DIR_SRC/entrypoint.sh /.dockerinit
RUN chmod 755 /.dockerinit

USER $USER
WORKDIR "/home/$USER"
VOLUME "/home/$USER"

CMD "/bin/bash"
ENTRYPOINT ["/.dockerinit"]